buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.4-SNAPSHOT'
        tokens_release_version = '1.0'
        tokens_release_group = 'com.r3.corda.lib.tokens'
        corda_release_distribution = 'net.corda'
        corda_gradle_plugins_version = '5.0.5'
        kotlin_version = '1.2.71'
        junit_version = '4.12'
        quasar_version = '0.7.12_r3'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.9.1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://mvnrepository.com/artifact/org.gradle/gradle-tooling-api' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib/com/r3/corda/lib/tokens/' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        // Can be removed post-release - used to get nightly snapshot build.
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://mvnrepository.com/artifact/com.nhaarman/mockito-kotlin' }
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "junit:junit:$junit_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaCompile "$corda_release_distribution:corda-finance-contracts:$corda_release_version"
    cordaCompile "$corda_release_distribution:corda-finance-workflows:$corda_release_version"
    cordaCompile "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordaCompile "$tokens_release_group:tokens-money:$tokens_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")
    cordapp project(":oracleClient")
    cordapp project(":oracleService")
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
    cordapp("$corda_release_distribution:corda-finance-contracts:$corda_release_version")
    cordapp("$corda_release_distribution:corda-finance-workflows:$corda_release_version")

    cordaCompile project(":clients")
    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.2"
        apiVersion = "1.2"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

cordapp {
    info {
        name "CorDapp Template"
        vendor "Corda Open Source"
        targetPlatformVersion 4
        minimumPlatformVersion 4
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$corda_release_distribution:corda-finance-contracts:$corda_release_version")
        cordapp("$corda_release_distribution:corda-finance-workflows:$corda_release_version")
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-money:$tokens_release_version")
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10003
        rpcSettings {
            address("localhost:10002")
            adminAddress("localhost:10042")
        }
        cordapps = [
                "$project.group:contracts:$project.version",
                "$project.group:workflows:$project.version",
                "$project.group:oracleClient:$project.version",
        ]
    }
    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address("localhost:10004")
            adminAddress("localhost:10044")
        }
        cordapps = [
                "$project.group:contracts:$project.version",
                "$project.group:workflows:$project.version",
                "$project.group:oracleClient:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10007
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        cordapps = [
                "$project.group:contracts:$project.version",
                "$project.group:workflows:$project.version",
                "$project.group:oracleClient:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyC,L=New York,C=US"
        p2pPort 10009
        rpcSettings {
            address("localhost:10008")
            adminAddress("localhost:10048")
        }
        cordapps = [
                "$project.group:contracts:$project.version",
                "$project.group:workflows:$project.version",
                "$project.group:oracleClient:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyD,L=New York,C=US"
        p2pPort 10011
        rpcSettings {
            address("localhost:10010")
            adminAddress("localhost:10050")
        }
        cordapps = [
                "$project.group:contracts:$project.version",
                "$project.group:workflows:$project.version",
                "$project.group:oracleClient:$project.version",
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Oracle,L=New York,C=US"
        p2pPort 10013
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        cordapps = [
                "$project.group:oracleService:$project.version",
                "$project.group:oracleClient:$project.version",
                "$project.group:workflows:$project.version",
                "$project.group:contracts:$project.version",

        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}